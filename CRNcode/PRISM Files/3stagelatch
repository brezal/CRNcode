ctmc

const int MAX_AMOUNT = 100;

// Parameters for reaction r_id7
const double k_r_id7 = 1.0;

// Parameters for reaction r_id8
const double k_r_id8 = 1.0;

// Parameters for reaction r_id9
const double k_r_id9 = 1.0;

// Parameters for reaction r_id10
const double k_r_id10 = 1.0;

// Parameters for reaction r_id11
const double k_r_id11 = 1.0;

// Parameters for reaction r_id12
const double k_r_id12 = 1.0;

// Parameters for reaction r_id13
const double k_r_id13 = 1.0;

// Parameters for reaction r_id14
const double k_r_id14 = 1.0;

// Parameters for reaction r_id15
const double k_r_id15 = 1.0;

// Parameters for reaction r_id16
const double k_r_id16 = 1.0;

// Species s_id0 (ymid)
const int s_id0_MIN = 0;
const int s_id0_MAX = MAX_AMOUNT;
module s_id0

    s_id0 : [s_id0_MIN..s_id0_MAX] init 10; // Initial amount 10

    // r_id9
    [r_id9] s_id0 > 0 -> (s_id0'=s_id0-1);
    // r_id10
    [r_id10] s_id0 > 0 -> (s_id0'=s_id0-1);
    // r_id11
    [r_id11] s_id0 <= s_id0_MAX-1 -> (s_id0'=s_id0+1);
    // r_id12
    [r_id12] s_id0 > 0 -> (s_id0'=s_id0-1);
    // r_id13
    [r_id13] s_id0 <= s_id0_MAX-1 -> (s_id0'=s_id0+1);
    // r_id14
    [r_id14] s_id0 > 0 -> (s_id0'=s_id0-1);
    // r_id15
    [r_id15] s_id0 <= s_id0_MAX-1 -> (s_id0'=s_id0+1);
    // r_id16
    [r_id16] s_id0 <= s_id0_MAX-1 -> (s_id0'=s_id0+1);

endmodule

// Species s_id1 (ylo)
const int s_id1_MIN = 0;
const int s_id1_MAX = MAX_AMOUNT;
module s_id1

    s_id1 : [s_id1_MIN..s_id1_MAX] init 0; // Initial amount 0

    // r_id10
    [r_id10] s_id1 <= s_id1_MAX-1 -> (s_id1'=s_id1+1);
    // r_id11
    [r_id11] s_id1 > 0 -> (s_id1'=s_id1-1);
    // r_id14
    [r_id14] s_id1 <= s_id1_MAX-1 -> (s_id1'=s_id1+1);
    // r_id16
    [r_id16] s_id1 > 0 -> (s_id1'=s_id1-1);

endmodule

// Species s_id2 (yhi)
const int s_id2_MIN = 0;
const int s_id2_MAX = MAX_AMOUNT;
module s_id2

    s_id2 : [s_id2_MIN..s_id2_MAX] init 0; // Initial amount 0

    // r_id9
    [r_id9] s_id2 <= s_id2_MAX-1 -> (s_id2'=s_id2+1);
    // r_id12
    [r_id12] s_id2 <= s_id2_MAX-1 -> (s_id2'=s_id2+1);
    // r_id13
    [r_id13] s_id2 > 0 -> (s_id2'=s_id2-1);
    // r_id15
    [r_id15] s_id2 > 0 -> (s_id2'=s_id2-1);

endmodule

// Species s_id3 (xhi)
const int s_id3_MIN = 0;
const int s_id3_MAX = MAX_AMOUNT;
module s_id3

    s_id3 : [s_id3_MIN..s_id3_MAX] init 10; // Initial amount 10

    // r_id8
    [r_id8] s_id3 > 0 -> (s_id3'=s_id3-1);
    // r_id11
    [r_id11] s_id3 > 0 -> (s_id3'=s_id3-0);
    // r_id12
    [r_id12] s_id3 > 0 -> (s_id3'=s_id3-0);

endmodule

// Species s_id4 (xlo)
const int s_id4_MIN = 0;
const int s_id4_MAX = MAX_AMOUNT;
module s_id4

    s_id4 : [s_id4_MIN..s_id4_MAX] init 0; // Initial amount 0

    // r_id13
    [r_id13] s_id4 > 0 -> (s_id4'=s_id4-0);
    // r_id14
    [r_id14] s_id4 > 0 -> (s_id4'=s_id4-0);

endmodule

// Species s_id5 (rhi)
const int s_id5_MIN = 0;
const int s_id5_MAX = MAX_AMOUNT;
module s_id5

    s_id5 : [s_id5_MIN..s_id5_MAX] init 0; // Initial amount 0

    // r_id7
    [r_id7] s_id5 <= s_id5_MAX-1 -> (s_id5'=s_id5+1);
    // r_id15
    [r_id15] s_id5 > 0 -> (s_id5'=s_id5-0);
    // r_id16
    [r_id16] s_id5 > 0 -> (s_id5'=s_id5-0);

endmodule

// Species s_id6 (rlo)
const int s_id6_MIN = 0;
const int s_id6_MAX = MAX_AMOUNT;
module s_id6

    s_id6 : [s_id6_MIN..s_id6_MAX] init 10; // Initial amount 10

    // r_id7
    [r_id7] s_id6 > 0 -> (s_id6'=s_id6-1);

endmodule

// Reaction rates
module reaction_rates

    // r_id7
    [r_id7] (k_r_id7*s_id6) > 0 -> (k_r_id7*s_id6) : true;
    // r_id8
    [r_id8] (k_r_id8*s_id3) > 0 -> (k_r_id8*s_id3) : true;
    // r_id9
    [r_id9] (k_r_id9*s_id2*s_id0) > 0 -> (k_r_id9*s_id2*s_id0) : true;
    // r_id10
    [r_id10] (k_r_id10*s_id1*s_id0) > 0 -> (k_r_id10*s_id1*s_id0) : true;
    // r_id11
    [r_id11] (k_r_id11*s_id3*s_id1) > 0 -> (k_r_id11*s_id3*s_id1) : true;
    // r_id12
    [r_id12] (k_r_id12*s_id3*s_id0) > 0 -> (k_r_id12*s_id3*s_id0) : true;
    // r_id13
    [r_id13] (k_r_id13*s_id4*s_id2) > 0 -> (k_r_id13*s_id4*s_id2) : true;
    // r_id14
    [r_id14] (k_r_id14*s_id4*s_id0) > 0 -> (k_r_id14*s_id4*s_id0) : true;
    // r_id15
    [r_id15] (k_r_id15*s_id5*s_id2) > 0 -> (k_r_id15*s_id5*s_id2) : true;
    // r_id16
    [r_id16] (k_r_id16*s_id5*s_id1) > 0 -> (k_r_id16*s_id5*s_id1) : true;

endmodule

// Reward structures (one per species)

// Species s_id0 (ymid)
rewards "s_id0" true : s_id0; endrewards
// Species s_id1 (ylo)
rewards "s_id1" true : s_id1; endrewards
// Species s_id2 (yhi)
rewards "s_id2" true : s_id2; endrewards
// Species s_id3 (xhi)
rewards "s_id3" true : s_id3; endrewards
// Species s_id4 (xlo)
rewards "s_id4" true : s_id4; endrewards
// Species s_id5 (rhi)
rewards "s_id5" true : s_id5; endrewards
// Species s_id6 (rlo)
rewards "s_id6" true : s_id6; endrewards

// Reward structure for calculating expected times
rewards "time" true : 1; endrewards

